boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
warnings()
?suppressWarnings
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
View(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
setsize
runs
init.perc
n.startsets
runs*init.perc/n.startsets
round(runs*init.perc/n.startsets)
?round
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
setsize
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
summary(ds)
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
devtools::load_all(".")
browser()
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
# FIT: Fit a surrogate model
fit = fit.surrogate(dat = dat,surrogate=surrogate,lastfit=ifelse(exists("fit"),fit,NULL))
exists("fit")
ifelse(exists("fit"),fit,NULL)
?ifelse
ifelse(exists("fit"),fit,0)
ifelse(exists("fit"),fit,NA)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
??tune.control
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
??list.append
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
devtools::load_all(".")
dgfun = example.dgf("ttest",delta=.2)
ds = find.design(
dgfun = dgfun,
boundaries = c(50,200),
power = .8,
runs = 2000
)
summary(ds)
plot(ds)
ds = find.design(
dgfun = dgfun,
boundaries = c(200,400),
power = .8,
runs = 2000
)
summary(ds)
plot(ds)
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,90),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 4000
)
summary(ds)
devtools::load_all(".")
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,90),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 4000
)
summary(ds)
summary(ds)
plot(ds,list(n=NA,k=10))
summary(ds)
plot(ds,list(n=NA,k=10))
x
names(x)
names(xvars)
x
devtools::load_all(".")
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,50),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 4000
)
summary(ds)
plot(ds,list(n=NA,k=10))
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,50),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 8000
)
summary(ds)
plot(ds,list(n=NA,k=10))
library(simpackage)
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,50),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 8000
)
summary(ds)
plot(ds,list(n=NA,k=10))
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,40),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 8000
)
summary(ds)
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,90),k=c(5,25)),
costfun = costfun,
power = .8,
runs = 4000)
summary(ds)
plot(ds,design=list(n=NA,k=9))
plot(ds,design=list(n=NA,k=10))
plot(ds,design=list(n=NA,k=9))
plot(ds,design=list(n=NA,k=10))
dgfun = example.dgf("ttest",delta=.6)
ds = find.design(
dgfun = dgfun,
boundaries = c(20,200),
power = .8,
runs = 2000,Ntry=2
)
summary(ds)
plot(ds)
dgfun = example.dgf("ttest",delta=.6)
ds = find.design(
dgfun = dgfun,
boundaries = c(20,200),
power = .8,
runs = 2000,Ntry=2
)
summary(ds)
plot(ds)
dgfun = example.dgf("ttest",delta=.6)
set.seed(1)
ds = find.design(
dgfun = dgfun,
boundaries = c(20,200),
power = .8,
runs = 2000,Ntry=2
)
summary(ds)
plot(ds)
set.seed(1)
ds = find.design(
dgfun = dgfun,
boundaries = c(20,200),
power = .8,
runs = 2000,Ntry=2
)
summary(ds)
plot(ds)
set.seed(2)
ds = find.design(
dgfun = dgfun,
boundaries = c(20,200),
power = .8,
runs = 2000,Ntry=2
)
summary(ds)
plot(ds)
set.seed(2)
ds = find.design(
dgfun = dgfun,
boundaries = c(20,200),
power = .8,
runs = 2000,Ntry=20
)
summary(ds)
plot(ds)
install.packages("htmltools")
install.packages("htmltools")
?mirt
library(mirt)
?mirt
library(simpackage)
dgfun = example.dgf("ttest",delta=.2)
ds = find.design(
dgfun = dgfun,
boundaries = c(50,200),
power = .8,
runs = 2000
)
summary(ds)
plot(ds)
plot(ds)
ds = find.design(
dgfun = dgfun,
boundaries = c(200,400),
power = .8,
runs = 2000
)
summary(ds)
plot(ds)
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,40),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 8000
)
summary(ds)
plot(ds,list(n=NA,k=10))
plot(ds,design=list(n=NA,k=9))
plot(ds,design=list(n=NA,k=9))
plot(ds,design=list(n=NA,k=10))
plot(ds,design=list(n=NA,k=9))
plot(ds,design=list(n=NA,k=10))
plot(ds,design=list(n=NA,k=9))
plot(ds,list(n=NA,k=10))
devtools::load_all(".")
plot(ds,list(n=NA,k=10))
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,40),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 8000
)
summary(ds)
plot(ds,list(n=NA,k=10))
devtools::load_all(".")
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,40),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 8000
)
summary(ds)
plot(ds,list(n=NA,k=10))
usedruns(dat)
# FIT: Fit a surrogate model
fit = fit.surrogate(dat = dat,surrogate=surrogate,lastfit=ifelse(exists("fit"),fit,0))
# PREDICTION: Get a prediction from the fitted model
pred = get.pred(fit=fit,dat=dat,power=power,costfun = costfun, max_cost=max_cost,boundaries=boundaries,task=task,Ntry=Ntry)
# check TERMINATION
is.terminate = check.term(runs=runs,ci=ci,time=time,dat=dat,time_temp=time_temp,fit =fit,pred=pred,ci_perc=ci_perc)
is.terminate
runs
devtools::load_all(".")
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,40),k=c(5,25)),
costfun = costfun,
max_cost = 174,
runs = 8000
)
summary(ds)
plot(ds,list(n=NA,k=10))
?mirt
library(mirt)
?mirt
#load LSAT section 7 data and compute 1 and 2 factor models
data <- expand.table(LSAT7)
itemstats(data)
(mod1 <- mirt(data, 1))
#load LSAT section 7 data and compute 1 and 2 factor models
data <- expand.table(LSAT7)
itemstats(data)
(mod1 <- mirt(data, 1))
mirt(data, 1)
mirt(data, 1)
mirt(data, 1)
mirt(data, 1)
mirt(data, 1)
mirt(data, 1)
mirt(data, 1)
edit(mirt)
edit(mirt:::ESTIMATION)
while (1) {
cat('\r',format(Sys.time(),'%H:%M:%S'))
flush.console()
}
while (1) {
cat('\r',format(Sys.time(),'%H:%M:%S'))
}
while (1) {
cat(format(Sys.time(),'%H:%M:%S'))
}
devtools::load_all(".")
library(simpackage)
dgfun = example.dgf("ttest")
ds = find.design(
dgfun = dgfun,
boundaries = c(50,200),
power = .8,
runs = 2000
)
devtools::load_all(".")
ds = find.design(
dgfun = dgfun,
boundaries = c(50,200),
power = .8,
runs = 2000
)
library(simpackage)
# 1D Plot
dgfun = example.dgf("ttest")
ds1 = find.design(
dgfun = dgfun,
boundaries = c(50,200),
power = .8,
runs = 2000
)
summary(ds1)
plot(ds1)
plot(ds1,adderrorbars = T)
# 1D plot with multidimensional dgf
dgfun = example.dgf("anova")
costfun = function(x) x[1]*1.9+x[2]*6
ds = find.design(
dgfun = dgfun,
boundaries = list(n = c(20,90),k=c(5,25)),
costfun = costfun,
power = .8,
runs = 4000)
summary(ds)
plot(ds,design=list(n=NA,k=9))
plot(ds,design=list(n=NA,k=10))
dgfun = example.dgf("ttest")
ds = find.design(
dgfun = dgfun,
boundaries = c(50,200),
power = .8,
runs = 2000,
autosave_dir = "C:/Users/admin/switchdrive/4 irt/"
)
summary(ds)
# ntry parameter is important for the search
dgfun = example.dgf("ttest",delta=.6)
set.seed(2)
ds = find.design(
dgfun = dgfun,
boundaries = c(20,200),
power = .8,
runs = 2000,Ntry=2
)
summary(ds)
plot(ds)
set.seed(2)
ds = find.design(
dgfun = dgfun,
boundaries = c(20,200),
power = .8,
runs = 2000,Ntry=20
)
summary(ds)
plot(ds)
