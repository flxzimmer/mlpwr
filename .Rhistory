}
items2=items*(1-severity) + altitems * severity
betamat = rbind(items,items2)
mod = dif(pers, betamat)
res = lid(orig, mod)
print(res)
}
return(list(items=items,betamat=betamat,severity=severity))
}
#' Alternative Models
#'
#' Specify alternative models. Instance functions have to be defined to create a model with the desired effect size difference.
#'
#'
#'
#' @param class asdasd
#'
#' @return
#' @export
#'
#' @examples
setup.alternative <- function(class="2PL") {
if (class=="2PL") {
instance <- function(model,effect.size) {
items.true = model$items
error = rlnorm(nrow(items.true),0,.05)-1
opt.func <- function(x) {
temp = items.true
slopes = items.true$alpha + error*x
temp$alpha = slopes
kl(items.true,temp,order=5)-effect.size
}
errorfactor = uniroot(opt.func,c(0,100))$root
items.alt = model$items
items.alt$alpha = items.alt$alpha+error*errorfactor
re = items.alt
return(re)
}
}
if (class=="DIF") {
instance <- function(model,effect.size) {
items.true = model$items
error = rnorm(nrow(items.true),0,.05)
opt.func <- function(x) {
temp = items.true
temp$beta = items.true$beta + error*x
kl(items.true,temp,person.dist = "norm",order=5)/2-effect.size
}
errorfactor = uniroot(opt.func,c(0,100))$root
items.alt = model$items
items.alt$beta = items.alt$beta+error*errorfactor
re = items.alt
return(re)
}
}
re = list(class=class,instance = instance)
return(re)
}
#' setup Tests
#'
#' @param reference.model
#' @param tests
#'
#' @return
#' @export
#'
#' @examples
setup.test <- function(type = "AndersenLR") {
if (type == "AndersenLR") {
re = function(df) {
df = clean.data(df)
rm <- RM(df)
re1 = LRtest(rm)$pvalue
return(re1)
}
}
if (type == "M2") {
re = function(df) {
df = clean.data(df)
rm = mirt(as.data.frame(df),1,"Rasch")
re1 = M2(rm)$p
return(re1)
}
}
return(re)
}
#' Power
#'
#' perform Power analysis
#'
#' @param reference.model
#' @param alternative.models
#' @param tests
#' @param alpha
#' @param beta
#'
#' @return
#' @export
#'
#' @examples
power <- function(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=n.pers,runs=2){
items.alt = altmodel$instance(model=model,effect.size = effect.size)
result <- function(n.pers=n.pers,items.alt,test1) {
df = initialize(xpl(model$dist.func(n.pers),items.alt$beta,items.alt$alpha,items.alt$gamma))
re = test1(df)
return(re)
}
res = c()
for (i in 1:runs) {
res[i]=result(n.pers=n.pers,items.alt,test1)
}
re = mean(res<alpha)
return(re)
}
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n=100,runs=5)
# helper ------------------------------------------------------------------
kl = function(items.true,items.alt,order=30) {
# mean expected kullback-leibler distance across items
# (by convention, p is true, q is est)
res = c()
for (i in 1:nrow(items.true)) {
px = function(x) {xpl(x,items.true$beta[i],items.true$alpha[i],items.true$gamma[i])}
qx = function(x) {xpl(x,items.alt$beta[i],items.alt$alpha[i],items.alt$gamma[i])}
kl = function(x) {px(x)*log(px(x)/qx(x))+(1-px(x))*log((1-px(x))/(1-qx(x))) }
res[i] = gauss.hermite(kl,order=order)
}
return(mean(res))
}
kl2 = function(items.true,items.alt,order=30) {
# expected kullback-leibler distance for whole data
# (by convention, p is true, q is est)
res = c()
px = function(x) {xpl(x,items.true$beta,items.true$alpha,items.true$gamma)}
qx = function(x) {xpl(x,items.alt$beta,items.alt$alpha,items.alt$gamma)}
kl = function(x) {px(x)*log(px(x)/qx(x))+(1-px(x))*log((1-px(x))/(1-qx(x))) }
res[i] = gauss.hermite(kl,order=order)
return(mean(res))
}
xpl = function (pers, items, slopes=NA, guessing=NA) {
#Generate pmat from 1PL / 2PL / 3PL Model
if (is.na(slopes[1])) {slopes = rep(1,length(items))}
if (is.na(guessing[1])) {guessing = rep(0,length(items))}
matrix = matrix(NA, length(pers), length(items))
for (i in 1:length(pers)) {
for (j in 1:length(items)) {
theta = pers[i]
beta = items[j]
alpha = slopes[j]
gamma = guessing [j]
a = exp(alpha * (theta - beta))
matrix[i, j] = gamma + (1-gamma)* a / (1 + a)
}
}
return(matrix)
}
initialize = function (m) {
#Generate 0/1 Matrix from Probabilites-Matrix
m = apply(m,1:2,function(x) {x>=runif(1)})
m = apply(m,2,as.numeric)
return(m)
}
clean.data =  function(df,ind = FALSE) {
#removes cols and rows without variance
#return excluded indices if ind =TRUE
df  = as.data.frame(df)
colnames(df) = as.character(1:ncol(df))
exclude = (rowSums(df) %in% c(0, ncol(df)))
exclude2 = (colSums(df) %in% c(0, nrow(df)))
while (any(c(exclude, exclude2))) {
df = df[!exclude, !exclude2]
exclude = (rowSums(df) %in% c(0, ncol(df)))
exclude2 = (colSums(df) %in% c(0, nrow(df)))
}
if (ind==FALSE) {return(as.matrix(df))} else {
pers.ind = as.numeric(rownames(df))
item.ind = as.numeric(colnames(df))
return(list(pers.ind,item.ind))
}
}
# functions ---------------------------------------------------------------
#' setup Models
#'
#' Setting up the IRT Model that corresponds to the null hypothesis being tested.
#'
#'
#' @param architecture IRT Model, e.g. Rasch
#' @param n.items Number of items
#' @param pers.dist Distribution of Person Parameters, e.g. normal
#' @param beta Vector of length n.items specifiying item difficulty
#'
#' @return
#' @export
#'
#' @examples
setup.model <- function(architecture = "Rasch", n.items= 20, beta = c(), pers.dist = "normal") {
if (architecture=="Rasch") {
items = data.frame(
alpha = rep(1,n.items),
beta = beta,
gamma = rep(0,n.items)
)
}
if (pers.dist =="normal") {
dist.func = rnorm
}
re = list(architecture=architecture,n.items=n.items,items = items,dist.func =dist.func)
return(re)
}
dif = function(pers, betamat) {
# Generate pmat from a DIF Model with Vxd Rmat and dxI Betamat
rmat = matrix(c(rep(c(0,1),length(pers)/2),rep(c(1,0),length(pers)/2)),ncol=2,byrow = T)
matrix = matrix(NA, length(pers), ncol(betamat))
mat = rmat %*% betamat
for (i in 1:length(pers)) {
for (j in 1:ncol(betamat)) {
theta = pers[i]
beta = mat[i,j]
a = exp(theta - beta)
matrix[i, j] = a / (1 + a)
}
}
return(matrix)
}
opt.dif = function (items,goal,tol,startvalue=0) {
# returns betamat and rmat so that violation is met with two dimensions
n.pers = 200 #persons tested per optimization cycle
pers = rnorm(n.pers)
severity = startvalue
altitems = rnorm(length(items))
items2=items*(1-severity)+altitems * severity
betamat = rbind(items,items2)
orig = xpl(pers, items)
mod = dif(pers, betamat)
res = lid(orig, mod)
while (abs(goal-res) > tol) {
#Optimierung notwendig
opt = .001+ (res-goal)^2/tol/10000000
if (res > goal) {
severity = severity + opt
} else{
severity = severity - opt
}
items2=items*(1-severity) + altitems * severity
betamat = rbind(items,items2)
mod = dif(pers, betamat)
res = lid(orig, mod)
print(res)
}
return(list(items=items,betamat=betamat,severity=severity))
}
#' Alternative Models
#'
#' Specify alternative models. Instance functions have to be defined to create a model with the desired effect size difference.
#'
#'
#'
#' @param class asdasd
#'
#' @return
#' @export
#'
#' @examples
setup.alternative <- function(class="2PL") {
if (class=="2PL") {
instance <- function(model,effect.size) {
items.true = model$items
error = rlnorm(nrow(items.true),0,.05)-1
opt.func <- function(x) {
temp = items.true
slopes = items.true$alpha + error*x
temp$alpha = slopes
kl(items.true,temp,order=5)-effect.size
}
errorfactor = uniroot(opt.func,c(0,100))$root
items.alt = model$items
items.alt$alpha = items.alt$alpha+error*errorfactor
re = items.alt
return(re)
}
}
if (class=="DIF") {
instance <- function(model,effect.size) {
items.true = model$items
error = rnorm(nrow(items.true),0,.05)
opt.func <- function(x) {
temp = items.true
temp$beta = items.true$beta + error*x
kl(items.true,temp,order=5)/2-effect.size
}
errorfactor = uniroot(opt.func,c(0,100))$root
items.alt = model$items
items.alt$beta = items.alt$beta+error*errorfactor
re = items.alt
return(re)
}
}
re = list(class=class,instance = instance)
return(re)
}
#' setup Tests
#'
#' @param reference.model
#' @param tests
#'
#' @return
#' @export
#'
#' @examples
setup.test <- function(type = "AndersenLR") {
if (type == "AndersenLR") {
re = function(df) {
df = clean.data(df)
rm <- RM(df)
re1 = LRtest(rm)$pvalue
return(re1)
}
}
if (type == "M2") {
re = function(df) {
df = clean.data(df)
rm = mirt(as.data.frame(df),1,"Rasch")
re1 = M2(rm)$p
return(re1)
}
}
return(re)
}
#' Power
#'
#' perform Power analysis
#'
#' @param reference.model
#' @param alternative.models
#' @param tests
#' @param alpha
#' @param beta
#'
#' @return
#' @export
#'
#' @examples
power <- function(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=n.pers,runs=2){
items.alt = altmodel$instance(model=model,effect.size = effect.size)
result <- function(n.pers=n.pers,items.alt,test1) {
df = initialize(xpl(model$dist.func(n.pers),items.alt$beta,items.alt$alpha,items.alt$gamma))
re = test1(df)
return(re)
}
res = c()
for (i in 1:runs) {
res[i]=result(n.pers=n.pers,items.alt,test1)
}
re = mean(res<alpha)
return(re)
}
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n=100,runs=5)
model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=n.pers,runs=2
model = model; altmodel=altmodel; test = test1; effect.size = .01;alpha = .05; n.pers=n.pers;runs=2
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
devtools::load_all(".")
devtools::load_all(".")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n=100,runs=5)
library(spatstat)
library(eRm)
library(mirt)
library(simpackage)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
devtools::load_all(".")
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
n.pers=3
tail(n.pers/2)
round(n.pers/2)
n.pers
half
half = (n.pers/2)
half = round(n.pers/2)
half
n.pers-half
n.pers=150
half = round(n.pers/2)
half
n.pers-half
devtools::load_all(".")
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=1000,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=1000,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=1000,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .1,alpha = .05, n.pers=100,runs=5)
library(simpackage)
?install.packages
?simpackage
??simpackage
?setup.alternative
setup.alternative
?setup.model
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
# library(spatstat)
# library(eRm)
# library(mirt)
library(simpackage)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
library(simpackage)
