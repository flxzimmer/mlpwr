facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.5) # how many?
resy = resy[resy$true_power>=.5,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=5,width=9.2);p11;dev.off()
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=6,width=9.2);p11;dev.off()
devtools::load_all(".")
load.libs()
load(file = paste0(folder,"tempres.Rdata")) #resx
load(file = paste0(folder,"at.Rdata")) # at
# Task B ------------------------------------------------------------
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# insert analytical results (wo kommen die her? am anfang importieren?)
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = 99.0805650087345
resX$analytical[as.numeric(resX$fun_nr)==4] = 150
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = 0.786687772969949
resX$analytical_power[as.numeric(resX$fun_nr)==4] = 0.787123625772207
resX = resX[resX$learner!="Analytical",]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.5) # how many?
resy = resy[resy$true_power>=.5,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=6,width=9.2);p11;dev.off()
# Cost Plot
resy = resX[as.numeric(resX$fun_nr)%in%c(2,6),]
p2 = ggplot(resy, aes(x= learner,y=cost,fill=budget)) + theme_bw() +
geom_hline(data= resy, aes(yintercept=actual_cost, linetype="Optimal cost"), color = "#B2182B") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Reds")+
facet_wrap(~ fun_nr,  scales = "free") + scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#B2182B")))) + ylab("Cost")+ xlab("Surrogate Model")+
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot2_",usetask,".pdf"),height=4 ,width=7);p2;dev.off()
# Höhenlinien Plot Function 2
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
# ignore some wrong values
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p3 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#2166AC","#B2182B"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = max(resX1$X2)), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Desired power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Optimal cost"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per group") +
ylab("Number of groups")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot3_",usetask,".pdf"),height=5,width=9.2);p3;dev.off()
# Höhenlinien Plot Function 6
fn_nr = 6
resX1 = resX[resX$fun_nr=="6 2D Mixed Model",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
# ignore some wrong values
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p4 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#2166AC","#B2182B"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = max(resX1$X2)), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Desired power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Optimal cost"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per cluster") + ylab("Number of clusters")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot4_",usetask,".pdf"),height=5,width=9.2);p4;dev.off()
# Boxplot Zeit
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
# Task C -----------------------------------------------------------------
usetask = "C"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.7) # how many?
resy = resy[resy$true_power>=.7,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=5,width=9.2);p11;dev.off()
# Höhenlinien Plot Function 2
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p3 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#B2182B","#2166AC"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Optimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Cost Threshold"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per group") +
ylab("Number of groups")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot3_",usetask,".pdf"),height=5,width=9.2);p3;dev.off()
# Höhenlinien Plot Function 6
fn_nr = 6
resX1 = resX[resX$fun_nr=="6 2D Mixed Model",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p4 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#B2182B","#2166AC"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Optimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Cost Threshold"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per cluster") + ylab("Number of clusters")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot4_",usetask,".pdf"),height=5,width=9.2);p4;dev.off()
# Plot Time
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")+theme(legend.position="bottom") + labs(x="Surrogate Model",y="Time used",fill="Budget")
# Load Preprocessed -------------------------------------------------------
devtools::load_all(".")
load.libs()
load(file = paste0(folder,"tempres.Rdata")) #resx
load(file = paste0(folder,"at.Rdata")) # at
# Task B ------------------------------------------------------------
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# insert analytical results (wo kommen die her? am anfang importieren?)
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = 99.0805650087345
resX$analytical[as.numeric(resX$fun_nr)==4] = 150
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = 0.786687772969949
resX$analytical_power[as.numeric(resX$fun_nr)==4] = 0.787123625772207
resX = resX[resX$learner!="Analytical",]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=6,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.5) # how many?
resy = resy[resy$true_power>=.5,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=6,width=9.2);p11;dev.off()
# Cost Plot
resy = resX[as.numeric(resX$fun_nr)%in%c(2,6),]
p2 = ggplot(resy, aes(x= learner,y=cost,fill=budget)) + theme_bw() +
geom_hline(data= resy, aes(yintercept=actual_cost, linetype="Optimal cost"), color = "#B2182B") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Reds")+
facet_wrap(~ fun_nr,  scales = "free") + scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#B2182B")))) + ylab("Cost")+ xlab("Surrogate Model")+
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot2_",usetask,".pdf"),height=4 ,width=7);p2;dev.off()
# Höhenlinien Plot Function 2
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
# ignore some wrong values
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p3 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#2166AC","#B2182B"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = max(resX1$X2)), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Desired power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Optimal cost"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per group") +
ylab("Number of groups")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot3_",usetask,".pdf"),height=6,width=9.2);p3;dev.off()
# Höhenlinien Plot Function 6
fn_nr = 6
resX1 = resX[resX$fun_nr=="6 2D Mixed Model",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
# ignore some wrong values
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p4 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#2166AC","#B2182B"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = max(resX1$X2)), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Desired power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Optimal cost"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per cluster") + ylab("Number of clusters")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot4_",usetask,".pdf"),height=6,width=9.2);p4;dev.off()
# Boxplot Zeit
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")+theme(legend.position="bottom") + labs(x="Surrogate Model",y="Time used",fill="Budget")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
# Task C -----------------------------------------------------------------
usetask = "C"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=6,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.7) # how many?
resy = resy[resy$true_power>=.7,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=6,width=9.2);p11;dev.off()
# Höhenlinien Plot Function 2
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p3 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#B2182B","#2166AC"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Optimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Cost Threshold"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per group") +
ylab("Number of groups")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot3_",usetask,".pdf"),height=6,width=9.2);p3;dev.off()
# Höhenlinien Plot Function 6
fn_nr = 6
resX1 = resX[resX$fun_nr=="6 2D Mixed Model",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p4 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#B2182B","#2166AC"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Optimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Cost Threshold"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per cluster") + ylab("Number of clusters")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="bottom")
pdf(paste0(folder,restag,"_plot4_",usetask,".pdf"),height=6,width=9.2);p4;dev.off()
# Plot Time
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")+theme(legend.position="bottom")+ labs(x="Surrogate Model",y="Time used",fill="Budget")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
