altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
library(simpackage)
install.packages("formatR")
library(formatR)
?formatR
??formatR
tidy_source()
?tidy_source()
options(arrow=T)
tidy_source()
rlnorm(nrow(items.true),0,.05)
rlnorm(20,0,.05)
rlnorm
C_rlnorm
library(mirt)
install.packages(c("eRm", "mirt", "spatstat"))
library(mirt)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
altmodel <- setup.alternative(class="DIF",diftype=20)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
altmodel <- setup.alternative(class="DIF",diftype=19)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
altmodel <- setup.alternative(class="DIF",diftype=10)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=10)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=2)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=3)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
library(simpackage)
setup.alternatives
setup.alternative
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=3)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .03,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .04,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
?mirt
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
?DIF
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
mirt::DIF(multipleGroup(data = as.data.frame(df), mirt.model =
mirt.model("F=1-20")),
group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)),which.par = "d",Wald=TRUE)
rm = mirt::DIF(MGModel= multipleGroup(data = as.data.frame(df), mirt.model =
mirt.model("F=1-20")),
group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)),which.par = "d",Wald=TRUE)
mirt::DIF(MGmodel= multipleGroup(data = as.data.frame(df), mirt.model =
mirt.model("F=1-20")),
group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)),which.par = "d",Wald=TRUE)
mirt::DIF(MGmodel= multipleGroup(data = as.data.frame(df), model =
mirt.model("F=1-20")),
group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)),which.par = "d",Wald=TRUE)
multipleGroup(data = as.data.frame(df), model =
mirt.model("F=1-20")),
group = c(rep("a", nrow(df) / 2)
mG  = multipleGroup(data = as.data.frame(df), model =
mirt.model("F=1-20"))
mG  = multipleGroup(data = as.data.frame(df), model =
mirt.model("F=1-20"),group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2))
mirt::DIF(MGmodel= multipleGroup(data = as.data.frame(df), model =
mirt.model("F=1-20")),
group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)),which.par = "d",Wald=TRUE)
re1 = M2(rm)$p
return(re1)
}
}
return(re)
}
#' Power
#'
#' perform Power analysis
#'
#' @import spatstat
#' @import mirt
#' @import eRm
#'
#' @param model model parameters created from the corresponding function
#' @param altmodel altmodel functions created from the corresponding function
#' @param test test functions created from the corresponding function
#' @param effect.size effect size (currently only expected Kullback-Leibler Distance)
#' @param n.pers Number of Persons
#' @param runs Number of Runs
#' @param alpha Alpha Niveau
#'
#' @return Power or 1-Beta
#' @export
#'
#' @examples
power <- function(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=n.pers,runs=2){
result <- function(n.pers=n.pers,items.alt,test1) {
items.alt = altmodel$instance(model=model,effect.size = effect.size)
df = altmodel$df.init(model,items.alt,n.pers)
re = test1(df)
return(re)
}
res = c()
for (i in 1:runs) {
res[i]=result(n.pers=n.pers,items.alt,test1)
}
re = mean(res<alpha)
return(re)
}
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
# functions ---------------------------------------------------------------
#' setup Models
#'
#' Setting up the IRT Model that corresponds to the null hypothesis being tested.
#'
#'
#' @param architecture IRT Model, e.g. Rasch
#' @param n.items Number of items
#' @param pers.dist Distribution of Person Parameters, e.g. normal
#' @param beta Vector of length n.items specifiying item difficulty
#'
#' @return List of model parameters and distribution function
#' @export
#'
#' @examples
setup.model <- function(architecture = "Rasch", n.items= 20, alpha = c(), beta = c(), pers.dist = "normal") {
if (architecture=="Rasch") {
items = data.frame(
alpha = rep(1,n.items),
beta = beta,
gamma = rep(0,n.items)
)
}
if (architecture=="2PL") {
items = data.frame(
alpha = alpha,
beta = beta,
gamma = rep(0,n.items)
)
}
if (pers.dist =="normal") {
dist.func = rnorm
}
re = list(architecture=architecture,n.items=n.items,items = items,dist.func =dist.func)
return(re)
}
#' Alternative Models
#'
#' Specify alternative models. Instance functions have to be defined to create a model with the desired effect size difference.
#'
#'
#'
#' @param class Type of alternative model. 2PL or DIF currently
#' @param diftype Type of DIF: "all" All items have different pars, alternatively an integer specifying the number of items with DIF.
#'
#' @return Function to initialize model with given effect size, function to create dataset from model parameters
#' @export
#'
#' @examples
setup.alternative <- function(class="2PL",diftype="all") {
if (class=="2PL") {
instance <- function(model,effect.size) {
items.true = model$items
error = rlnorm(nrow(items.true),0,.05)-1
opt.func <- function(x) {
temp = items.true
slopes = items.true$alpha + error*x
temp$alpha = slopes
kl(items.true,temp,order=5)-effect.size
}
errorfactor = uniroot(opt.func,c(0,100))$root
items.alt = model$items
items.alt$alpha = items.alt$alpha+error*errorfactor
re = items.alt
return(re)
}
df.init = function(model,items.alt,n.pers) {
initialize(xpl(model$dist.func(n.pers),items.alt$beta,items.alt$alpha,items.alt$gamma))
}
}
if (class=="DIF") {
instance <- function(model,effect.size) {
items.true = model$items
if (diftype == "all") {
error = rnorm(nrow(items.true), 0, .05)
} else {
error = c(rnorm(diftype, 0, .05),rep(0,nrow(items.true)-diftype))
}
opt.func <- function(x) {
temp = items.true
temp$beta = items.true$beta + error*x
kl(items.true,temp,order=5)/2-effect.size
}
errorfactor = uniroot(opt.func,c(0,1000))$root
items.alt = model$items
items.alt$beta = items.alt$beta+error*errorfactor
re = items.alt
return(re)
}
df.init = function(model,items.alt,n.pers) {
half = round(n.pers/2)
a1 = initialize(xpl(model$dist.func(half),model$items$beta,model$items$alpha,model$items$gamma))
a2 = initialize(xpl(model$dist.func(n.pers-half),items.alt$beta,items.alt$alpha,items.alt$gamma))
rbind(a1,a2)
}
}
re = list(class=class,instance = instance,df.init=df.init)
return(re)
}
#' setup Tests
#'
#' Wrapper for Tests
#'
#' @param type Test, currently: AndersenLR, M2
#'
#' @return Function that takes a dataset and returns a p-value
#' @export
#'
#' @examples
setup.test <- function(type = "AndersenLR") {
if (type == "AndersenLR") {
re = function(df) {
df = clean.data(df)
rm <- RM(df)
re1 = LRtest(rm)$pvalue
return(re1)
}
}
if (type == "M2") {
re = function(df) {
df = clean.data(df)
rm = mirt(as.data.frame(df),1,"Rasch")
re1 = M2(rm)$p
return(re1)
}
}
if (type == "Wald") {
re = function(df) {
df = clean.data(df)
browser()
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
simpackage:::kl()
simpackage:::kl
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
# helper ------------------------------------------------------------------
kl = function(items.true,items.alt,order=30) {
# mean expected kullback-leibler distance across items
# (by convention, p is true, q is est)
res = c()
for (i in 1:nrow(items.true)) {
px = function(x) {xpl(x,items.true$beta[i],items.true$alpha[i],items.true$gamma[i])}
qx = function(x) {xpl(x,items.alt$beta[i],items.alt$alpha[i],items.alt$gamma[i])}
kl = function(x) {px(x)*log(px(x)/qx(x))+(1-px(x))*log((1-px(x))/(1-qx(x))) }
res[i] = gauss.hermite(kl,order=order)
}
return(mean(res))
}
kl2 = function(items.true,items.alt,order=30) {
# expected kullback-leibler distance for whole data
# (by convention, p is true, q is est)
res = c()
px = function(x) {xpl(x,items.true$beta,items.true$alpha,items.true$gamma)}
qx = function(x) {xpl(x,items.alt$beta,items.alt$alpha,items.alt$gamma)}
kl = function(x) {px(x)*log(px(x)/qx(x))+(1-px(x))*log((1-px(x))/(1-qx(x))) }
res[i] = gauss.hermite(kl,order=order)
return(mean(res))
}
xpl = function (pers, items, slopes=NA, guessing=NA) {
#Generate pmat from 1PL / 2PL / 3PL Model
if (is.na(slopes[1])) {slopes = rep(1,length(items))}
if (is.na(guessing[1])) {guessing = rep(0,length(items))}
matrix = matrix(NA, length(pers), length(items))
for (i in 1:length(pers)) {
for (j in 1:length(items)) {
theta = pers[i]
beta = items[j]
alpha = slopes[j]
gamma = guessing [j]
a = exp(alpha * (theta - beta))
matrix[i, j] = gamma + (1-gamma)* a / (1 + a)
}
}
return(matrix)
}
initialize = function (m) {
#Generate 0/1 Matrix from Probabilites-Matrix
m = apply(m,1:2,function(x) {x>=runif(1)})
m = apply(m,2,as.numeric)
return(m)
}
clean.data =  function(df,ind = FALSE) {
#removes cols and rows without variance
#return excluded indices if ind =TRUE
df  = as.data.frame(df)
colnames(df) = as.character(1:ncol(df))
exclude = (rowSums(df) %in% c(0, ncol(df)))
exclude2 = (colSums(df) %in% c(0, nrow(df)))
while (any(c(exclude, exclude2))) {
df = df[!exclude, !exclude2]
exclude = (rowSums(df) %in% c(0, ncol(df)))
exclude2 = (colSums(df) %in% c(0, nrow(df)))
}
if (ind==FALSE) {return(as.matrix(df))} else {
pers.ind = as.numeric(rownames(df))
item.ind = as.numeric(colnames(df))
return(list(pers.ind,item.ind))
}
}
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(simpackage)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="2PL")
test1 <- setup.test(type = "AndersenLR")
power(model = model, altmodel=altmodel, test = test1, effect.size = .01,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "Rasch", n.items= 20, beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF")
test1 <- setup.test(type = "M2")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
mG  = multipleGroup(data = as.data.frame(df), model =
mirt.model("F=1-20"),group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)))
summary(mG)
?DIF
group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2))
model <- multipleGroup(df, 1, group, SE = TRUE)
#      mG  = multipleGroup(data = as.data.frame(df), model = mirt.model("F=1-20"),group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)))
DIF(model, which.par = "d",Wald=TRUE)
#      mG  = multipleGroup(data = as.data.frame(df), model = mirt.model("F=1-20"),group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)))
a= DIF(model, which.par = "d",Wald=TRUE)
a
summary(a)
#      mG  = multipleGroup(data = as.data.frame(df), model = mirt.model("F=1-20"),group = c(rep("a", nrow(df) / 2), rep("b", nrow(df) / 2)))
a= DIF(model, which.par = "d",Wald=TRUE,simplify=FALSE)
a
print(a)
a= DIF(model, c('a1', 'd'),Wald=TRUE,simplify=FALSE)
a
4545+44
a= DIF(model, c('a1', 'd'),Wald=TRUE,simplify=FALSE)
summary(a)
a= DIF(model, 'd',Wald=TRUE,simplify=FALSE)
summary(a)
a= DIF(model, 'd',Wald=F,simplify=FALSE)
summary(a)
a
model <- multipleGroup(df, 1, group, SE = TRUE)
a= DIF(model, 'd',Wald=F,simplify=FALSE)
DIF(model, 'd',Wald=TRUE,p.adjust = 'fdr')
a = DIF(model, 'd',Wald=TRUE,p.adjust = 'fdr')
summary(a)
a
DIF(model, 'd',Wald=TRUE,p.adjust = 'fdr')
View(summary(a))
str(a)
a
print(a)
a$adj_pvals
min(a$adj_pvals)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald",waldtype = "single")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
library(simpackage)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=1)
test1 <- setup.test(type = "Wald",waldtype = "single")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
model <- setup.model(architecture = "2PL", n.items= 20, alpha = rlnorm(n=20,sdlog=.05), beta = rnorm(20), pers.dist = "normal")
altmodel <- setup.alternative(class="DIF",diftype=5)
test1 <- setup.test(type = "Wald",waldtype = "any")
power(model = model, altmodel=altmodel, test = test1, effect.size = .02,alpha = .05, n.pers=100,runs=5)
