resx$fun_nr = factor(resx$fun_nr, labels=funlabels[which(1:6 %in% resx$fun_nr)])
resx$fun_nr
resx = resx[!is.na(resx$fun_nr),]
resx$value.sd[resx$value.sd ==10] = NA
usetask = "B"
resX = resx[resx$task==usetask,]
# resX$budget = resX$budget |> as.numeric()
resX = resX[!is.na(resX$cost),]
# convert analytical to column
# table(resx$cost[resx$learner=="Analytical"])
# table(resx$true_power[resx$learner=="Analytical"])
# View(resx[resx$learner=="Analytical",])
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = 99.0805650087345
resX$analytical[as.numeric(resX$fun_nr)==4] = 150
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = 0.786687772969949
resX$analytical_power[as.numeric(resX$fun_nr)==4] = 0.787123625772207
resX = resX[resX$learner!="Analytical",]
# Boxplots
p1 = ggplot(resX, aes(x= learner,y=cost,fill=budget)) + geom_violin(draw_quantiles = 0.5) + geom_hline(data= resX, aes(yintercept=actual_cost, linetype="Analytical cost"), color = "red") + geom_hline(data= resX, aes(yintercept=analytical, linetype="Optimal cost"), color = "black") + facet_wrap(~ fun_nr,  scales = "free") + scale_linetype_manual(name = "", values = c(2, 2),guide = guide_legend(override.aes = list(color = c("black", "red")))) + ylab("Cost")+ xlab("Surrogate Model")
# HÃ¶henlinien Plot Function 6
fn_nr = 6
resX1 = resX[resX$fun_nr=="6 2D Mixed Model",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(10,fn,method="Brent",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
p6 = ggplot(resX1, aes(x=X1, y=X2))  + geom_line(data=eqpower,aes(x=X1, y=X2,col="Minimal power"),size=1)+ geom_line(data=eqcost,aes(x=X1, y=X2,col="Optimal cost"),size=1)+ geom_point(aes(col = learner))+
scale_colour_manual(values = c("orange", "red","cyan", "black"), guide = guide_legend(title="",override.aes = list(linetype = c("blank", "solid", "solid","blank"),shape = c(16,NA, NA,16))))+ xlab("Participants per Cluster") + ylab("Number of Clusters")
p6
resX1
View(resX1)
devtools::load_all(".")
View(resx)
library(simpackage)
load.libs()
CLUSTERSIZE = 30
n.runs = 40
fun_nr = c(6)
task = c("B")
budget = c("low","mid","high")
goal.ci = NA
sim2 = expand.grid(run=1:n.runs,fun_nr=fun_nr,task=task,budget = budget,goal.ci = goal.ci)
sim2 = sim2  %>% split(., seq(nrow(.))) %>% lapply(.,as.list)
sim = sim2
for (i in 1:length(sim)){
sim[[i]]$seed = i
}
x = sim[[9]]
fun_nr = x$fun_nr
task = x$task
budget = x$budget
goal.ci = x$goal.ci
seed = x$seed
x1 = load.cond(fun_nr,task,budget,goal.ci)
runfun=x1$runfun
design=x1$design
cost=x1$cost
budget=x1$budget
goal.ci=x1$goal.ci
analytical=x1$analytical
goal=x1$goal
fixed_cost=x1$fixed_cost
goal.ci
seed
re0 = list(value=analytical,value.sd = NA,data = NA,budget=NA,fun=NA,fun.sd =NA)
startdat= ss.find(reg.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget,seed=seed,cost=cost,dat.only=T)
re1=re2=NULL
if (!fun_nr%in%c(2,6)) {
re1 =  ss.find(reg.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget,seed=seed,cost=cost,dat=startdat)
re2 =  ss.find(logi.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat)
}
# re3 =  ss.find(svm.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
re3 =  NULL
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
re = list(x,re0,re1,re2,re3,re4)
# Delete funs (smaller file)
re = lapply(re,function(y) return(y[names(y)!="fun.sd"]))
re = lapply(re,function(y) return(y[names(y)!="fun"]))
re4$time_used
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
boundmins
boundmaxs
# Acquisition Function
# fn = function(x) (predfun(x)-goal)^2*10^5+cost(x)/cost(midpars)
fn = function(x) (predfun(x)-goal)^2*10^4+cost(x)/cost(midpars)
if (Ntry >1) {
a = hush(multistart(parmat=parmat,fn=fn,method="L-BFGS-B",lower=boundmins,upper=boundmaxs,control=list(factr=1)))
new.n = a[which(a$value==min(a$value))[1],1:ncol(xvars)]
exact = as.numeric(new.n)
}
a = hush(multistart(parmat=parmat,fn=fn,method="L-BFGS-B",lower=boundmins,upper=boundmaxs,control=list(factr=1)))
new.n = a[which(a$value==min(a$value))[1],1:ncol(xvars)]
exact = as.numeric(new.n)
exact
floor(exact)
ceiling(exact)
# Serch integer candidate values for best match
cands = expand.grid(data.frame(rbind(floor(exact),ceiling(exact))))
cands
boundmaxs
# Serch integer candidate values for best match
cands = expand.grid(data.frame(rbind(boundmins, boundmaxs)))
cands
boundmins
rbind(boundmins, boundmaxs)
boundmins[1]:boundmaxs[1]
cands = expand.grid(data.frame(rbind(boundmins[1]:boundmaxs[1], boundmins[2]:boundmaxs[2])))
cands
rbind(boundmins[1]:boundmaxs[1], boundmins[2]:boundmaxs[2])
rbind(boundmins[1]:boundmaxs[1], boundmins[2]:boundmaxs[2])
# Serch integer candidate values for best match
cands = expand.grid(data.frame(rbind(1:4,5:8)))
cands
# Serch integer candidate values for best match
cands = expand.grid(data.frame(cbind(1:4,5:8)))
cands
boundmins
# Serch integer candidate values for best match
cands = expand.grid(data.frame(cbind(boundmins[1]:boundmaxs[1],5:8)))
boundmins[1]:boundmaxs[1]
cbind(boundmins[1]:boundmaxs[1],5:8)
# Serch integer candidate values for best match
cands = expand.grid(n = boundmins[1]:boundmaxs[1],k =5:8))
# Serch integer candidate values for best match
cands = expand.grid(n = boundmins[1]:boundmaxs[1],k =5:8)
cands
boundmins
cands = expand.grid(n = boundmins[1]:boundmaxs[1],k = boundmins[2]:boundmaxs[2])
cands = unique(cands)
length(cands)
cands
nrow(cands)
aq_vals = apply(cands,1,fn)
pw_vals = apply(cands,1,function(x) (predfun(x)-goal))
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
exact
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
# Serch integer candidate values for best match
cands = expand.grid(data.frame(rbind(floor(exact),ceiling(exact))))
cands
data.frame(rbind(floor(exact),ceiling(exact)))
cands = expand.grid(data.frame(rbind((floor(exact)-1):(floor(exact)),ceiling(exact))))
# Serch integer candidate values for best match
cands = expand.grid(data.frame(rbind(floor(exact),ceiling(exact))))
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
sink()
devtools::load_all(".")
sink()
sink()
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
cands = expand.grid(data.frame(rbind(floor(exact),ceiling(exact))))
cands
exact
a = c(4.7,8.10)
exact = c(4.7,8.10)
cands = expand.grid(data.frame(rbind(floor(exact),ceiling(exact))))
exact = c(4.7,8.10)
cands = expand.grid(data.frame(rbind(floor(exact),ceiling(exact))))
cands
floor(exact)
data.frame(rbind(floor(exact),ceiling(exact)))
cbind(floor(exact)-1,floor(exact),ceiling(exact),ceiling(exact)+1)
rbind(floor(exact)-1,floor(exact),ceiling(exact),ceiling(exact)+1)
a = rbind(floor(exact)-1,floor(exact),ceiling(exact),ceiling(exact)+1)
expand.grid(a)
expand.grid(data.frame(a))
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
# Serch integer candidate values for best match
# cands = expand.grid(data.frame(rbind(floor(exact),ceiling(exact))))
cands = expand.grid(data.frame(rbind(floor(exact)-1,floor(exact),ceiling(exact),ceiling(exact)+1)))
cands = unique(cands)
cands
aq_vals = apply(cands,1,fn)
pw_vals = apply(cands,1,function(x) (predfun(x)-goal))
greedy
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
acceptable = which(pw_vals+sd_vals>0 & sd_vals!=10)
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
sink()
sink()
sink()
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
warnings()
sink()
warnings()
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
exact
predfun(exact)
predfun(new.n)
exact
new.n
exact
new.n = a[which(a$value==min(a$value))[1],1:ncol(xvars)]
new.n
exact
exact = as.numeric(new.n)
# Serch integer candidate values for best match
# cands = expand.grid(data.frame(rbind(floor(exact),ceiling(exact))))
cands = expand.grid(data.frame(rbind(floor(exact)-2,floor(exact)-1,floor(exact),ceiling(exact),ceiling(exact)+1,ceiling(exact)+2)))
cands = unique(cands)
cands
cands = unique(cands)
aq_vals = apply(cands,1,fn)
pw_vals = apply(cands,1,function(x) (predfun(x)-goal))
pw_vals
greedy
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
acceptable = which(pw_vals+sd_vals>0 & sd_vals!=10)
acceptable
cands
sd_vals
pw_vals+sd_vals>0
sd_vals
sd_vals[sd_vals==10]=max(sd_vals)
sd_vals
sd_vals[sd_vals==10]= max(sd_vals[sd_vals<10])
sd_vals
pw_vals
acceptable
acceptable = which(pw_vals+sd_vals>0)
acceptable
ind = which(aq_vals[acceptable] == min(aq_vals[acceptable]))
new.n = as.numeric(cands[acceptable[ind],])
new.n
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
sink()
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
ind = which(cost_vals[acceptable] == min(cost_vals[acceptable]))
ind
acceptable = cands[ind]
[ind]
cands
ind
cands
cands[ind]
cands
acceptable = cands[ind,]
acceptable
ind = which(aq_vals[acceptable] == min(aq_vals[acceptable]))
acceptable
ind = which(cost_vals[acceptable] == min(cost_vals[acceptable]))
acceptable = ind
ind = which(aq_vals[acceptable] == min(aq_vals[acceptable]))
devtools::load_all(".")
sink()
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
ind = which(cost_vals[acceptable] == min(cost_vals[acceptable]))
acceptable = ind
ind = which(aq_vals[acceptable] == min(aq_vals[acceptable]))
ind
# acceptable = which(pw_vals+sd_vals>0 & sd_vals!=10)
acceptable = which(pw_vals+sd_vals>0)
acceptable
acceptable = which(pw_vals>0)
acceptable
ind = which(cost_vals[acceptable] == min(cost_vals[acceptable]))
ind
acceptable = ind
ind = which(aq_vals[acceptable] == min(aq_vals[acceptable]))
new.n = as.numeric(cands[acceptable[ind],])
new.n
cands
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
devtools::load_all(".")
sink()
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
sink()
design
boundmins = sapply(design,function(x) x[1])
boundmins
a = c(2,5)
a<boundminds
a<boundmins
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
out2
out1
cands
out1
out2
cands=cands[!out1&!out2,]
cands
devtools::load_all(".")
sink()
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
library(simpackage)
load.libs()
CLUSTERSIZE = 30
n.runs = 40
fun_nr = c(6)
task = c("B")
budget = c("low","mid","high")
goal.ci = NA
sim2 = expand.grid(run=1:n.runs,fun_nr=fun_nr,task=task,budget = budget,goal.ci = goal.ci)
sim2 = sim2  %>% split(., seq(nrow(.))) %>% lapply(.,as.list)
sim = sim2
for (i in 1:length(sim)){
sim[[i]]$seed = i
}
x = sim[[9]]
fun_nr = x$fun_nr
task = x$task
budget = x$budget
goal.ci = x$goal.ci
seed = x$seed
x1 = load.cond(fun_nr,task,budget,goal.ci)
runfun=x1$runfun
design=x1$design
cost=x1$cost
budget=x1$budget
goal.ci=x1$goal.ci
analytical=x1$analytical
goal=x1$goal
fixed_cost=x1$fixed_cost
# run ---------------------------------------------------------------------
re0 = list(value=analytical,value.sd = NA,data = NA,budget=NA,fun=NA,fun.sd =NA)
startdat= ss.find(reg.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget,seed=seed,cost=cost,dat.only=T)
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
cands
devtools::load_all(".")
cands = expand.grid(data.frame(rbind(floor(exact)-2,floor(exact)-1,floor(exact),ceiling(exact),ceiling(exact)+1,ceiling(exact)+2)))
cands = unique(cands)
out1 = apply(cands,1,function(x) any(x<boundmins))
out2 = apply(cands,1,function(x) any(x>boundmaxs))
cands=cands[!out1&!out2,]
library(simpackage)
load.libs()
CLUSTERSIZE = 30
n.runs = 40
fun_nr = c(6)
task = c("B")
budget = c("low","mid","high")
goal.ci = NA
sim2 = expand.grid(run=1:n.runs,fun_nr=fun_nr,task=task,budget = budget,goal.ci = goal.ci)
sim2 = sim2  %>% split(., seq(nrow(.))) %>% lapply(.,as.list)
sim = sim2
for (i in 1:length(sim)){
sim[[i]]$seed = i
}
fun_nr = x$fun_nr
task = x$task
budget = x$budget
goal.ci = x$goal.ci
seed = x$seed
x1 = load.cond(fun_nr,task,budget,goal.ci)
runfun=x1$runfun
design=x1$design
cost=x1$cost
budget=x1$budget
goal.ci=x1$goal.ci
analytical=x1$analytical
goal=x1$goal
fixed_cost=x1$fixed_cost
# run ---------------------------------------------------------------------
re0 = list(value=analytical,value.sd = NA,data = NA,budget=NA,fun=NA,fun.sd =NA)
startdat= ss.find(reg.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget,seed=seed,cost=cost,dat.only=T)
x = sim[[9]]
fun_nr = x$fun_nr
task = x$task
budget = x$budget
goal.ci = x$goal.ci
seed = x$seed
x1 = load.cond(fun_nr,task,budget,goal.ci)
runfun=x1$runfun
design=x1$design
cost=x1$cost
budget=x1$budget
goal.ci=x1$goal.ci
analytical=x1$analytical
goal=x1$goal
fixed_cost=x1$fixed_cost
# run ---------------------------------------------------------------------
re0 = list(value=analytical,value.sd = NA,data = NA,budget=NA,fun=NA,fun.sd =NA)
startdat= ss.find(reg.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget,seed=seed,cost=cost,dat.only=T)
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
sink()
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
devtools::load_all(".")
sink()
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
exact
sink8)
sink()
sink()
exact
sd_vals
cands
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
sd_vals
sd_vals[sd_vals==10]= min(sd_vals[sd_vals<10])/2
sd_vals
pw_vals
sd_vals[sd_vals==10]= min(sd_vals[sd_vals<10])/2
# acceptable = which(pw_vals+sd_vals>0 & sd_vals!=10)
acceptable = which(pw_vals+sd_vals/2>0)
acceptable
length(acceptable)==nrow(cands)
acceptable = which(pw_vals>0)
acceptable
ind = which(cost_vals[acceptable] == min(cost_vals[acceptable]))
acceptable = ind
ind = which(aq_vals[acceptable] == min(aq_vals[acceptable]))
new.n = as.numeric(cands[acceptable[ind],])
new.n
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
new.n
predfun(exact)-goal
predfun(new.n)-goal
acceptable = which(pw_vals>0)
ind = which(cost_vals[acceptable] == min(cost_vals[acceptable]))
ind
acceptable = ind
ind = which(aq_vals[acceptable] == min(aq_vals[acceptable]))
ind
cands
acceptable[ind]
cands
pw_vals
acceptable = which(pw_vals>0)
acceptable
acceptable = pw_vals>0
acceptable
ind = cost_vals[acceptable] == min(cost_vals[acceptable])
ind = which(aq_vals[ind] == min(aq_vals[ind]))
new.n = as.numeric(cands[ind,])
new.n
acceptable = pw_vals>0
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
ind
cands
pw_vals
acceptable
pw_vals+sd_vals/2>0
length(acceptable)==nrow(cands)
acceptable = pw_vals>0
acceptable
ost_vals[acceptable]
cost_vals[acceptable]
min(cost_vals[acceptable])
acceptable = which(pw_vals>0)
xvars
acceptable
devtools::load_all(".")
re4 =  ss.find(gauss.pred,runfun=runfun,design=design,goal=goal,goal.ci=goal.ci,budget=budget, seed=seed,cost=cost,dat=startdat,fixed_cost=fixed_cost)
re4$value
load(file= paste0(folder,"at.Rdata"))
at[[6]]$actually_true
library(simpackage)
load.libs()
CLUSTERSIZE = 30
n.runs = 40
fun_nr = c(6)
task = c("B")
budget = c("low","mid","high")
goal.ci = NA
sim2 = expand.grid(run=1:n.runs,fun_nr=fun_nr,task=task,budget = budget,goal.ci = goal.ci)
sim2 = sim2  %>% split(., seq(nrow(.))) %>% lapply(.,as.list)
sim = sim2
# for (i in 1:length(sim)){
#   sim[[i]]$seed = i
# }
# set random seed
set.seed(as.numeric(Sys.time()))
# add seeds
for (i in 1:length(sim)){
sim[[i]]$seed = sample(1:10^10, 1)
}
#shuffle conditions
sim = sim[sample(1:length(sim))]
set.seed(10^9)
set.seed(10^10)
set.seed(10^9*4.5)
set.seed(10^8*4.5)
