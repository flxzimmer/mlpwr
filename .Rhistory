ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
# Serch integer candidate values for best match
a = floor(exact)
cands = expand.grid(data.frame(rbind(a-2,a-1,a,a+1,a+2,a+3)))
cands = unique(cands)
out1 = apply(cands,1,function(x) any(x<boundmins))
out2 = apply(cands,1,function(x) any(x>boundmaxs))
cands=cands[!out1&!out2,,drop = F]
aq_vals = apply(cands,1,fn)
pw_vals = apply(cands,1,function(x) (fit$fitfun(x)-goal))
cost_vals = apply(cands,1,costfun)
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
sd_vals[sd_vals==10]= min(sd_vals[sd_vals<10])/2
acceptable = which(pw_vals+sd_vals/2>0)
acceptable
ind = which(cost_vals[acceptable] == min(cost_vals[acceptable]))
acceptable2 = acceptable[ind]
ind2 = which(aq_vals[acceptable2] == min(aq_vals[acceptable2]))
acceptable3 = acceptable2[ind2]
new.n = as.numeric(cands[acceptable3,])
new.n
# Check if a reasonable value has been found
toofar = abs(fit$fitfun(exact)-goal)>.01 | abs(fit$fitfun(new.n)-goal)>.05
toofar
fit$new.n
new.n
task
?switch (object,
case = action
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
terminate
runs
dat
check.term(terminate,runs,dat)
used = usedruns(dat)
runs.remaining = runs - used
runs.remaining
"ci" %in% terminate
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
# check termination
is.terminate = check.term(terminate,runs,dat)
is.terminate
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ss.find(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
setsize
sink()
sink()
setsize
points
n.failed.predictions
pred$badprediction
pred$points
round(setsize/nrow(points)),1)
round(setsize/nrow(points))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
View(ds)
summary(ds)
devtools::load_all(".")
class(ds) = "designresult"
summary(ds)
ds
summary(ds)
summary.designresult(ds)
?summary
class(ds)
devtools::document()
library(simpackage)
ds
summary(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
sd_vals[sd_vals==10]= min(sd_vals[sd_vals<10])/2
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
sd_vals[sd_vals==10]= min(sd_vals[sd_vals<10])/2
sd_vals
cands
View(dat)
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
sd_vals[sd_vals==10]= min(sd_vals[sd_vals<10])/2
acceptable = which(pw_vals+sd_vals/2>0)
acceptable
sd_vals
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
sd_vals
pw_vals
sd_vals[sd_vals==10]= min(sd_vals[sd_vals<10])/2
sd_vals
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
sd_vals
?min
min(sd_vals[sd_vals<10])
min(sd_vals[sd_vals<10],na.rm=T)
min(sd_vals[sd_vals<10])/2
sd_vals = apply(cands,1,function(x) get.sd(dat,x))
all(sd_vals>=10)
sd_vals = Inf
sd_vals[sd_vals==10]= min(sd_vals[sd_vals<10])/2
if (all(sd_vals>=10)) sd_vals = Inf else
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
View(ds)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
call
View(call)
?match.call
?call
?eval
?call
?saved_call
# save the function call
saved_call = match.call()
View(saved_call)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
ds = find.design(continue=ds,runs = 100)
summary(ds)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
View(ds)
dsbu = ds
ds = find.design(continue=ds,runs = 100)
ds = dsbu
ds2 = find.design(continue=ds,runs = 100)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000
)
summary(ds)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
warnings()
?suppressWarnings
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
View(ds)
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
setsize
runs
init.perc
n.startsets
runs*init.perc/n.startsets
round(runs*init.perc/n.startsets)
?round
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
setsize
devtools::load_all(".")
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 100
)
summary(ds)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
summary(ds)
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
devtools::load_all(".")
browser()
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
# FIT: Fit a surrogate model
fit = fit.surrogate(dat = dat,surrogate=surrogate,lastfit=ifelse(exists("fit"),fit,NULL))
exists("fit")
ifelse(exists("fit"),fit,NULL)
?ifelse
ifelse(exists("fit"),fit,0)
ifelse(exists("fit"),fit,NA)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
??tune.control
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
??list.append
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
devtools::load_all(".")
dgf = runfun.ttest(delta = .4)
ds = find.design(
dgfun = dgf,
boundaries = c(50,200),
power = .8,
runs = 1000,
surrogate=c("svr")
)
