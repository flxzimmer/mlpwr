resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
dat.at = data.frame(t(atx$actually_true))
eqpower = eqpower[!is.na(eqpower$X2),]
p7 = ggplot() + theme_bw()  + xlim(40, 80) + ylim(5,16) +
scale_colour_manual(values = c("#B2182B", "#2166AC","black"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid","blank"),shape = c(NA, NA,3)))) +
xlab("Participants per Cluster") +
ylab("Number of Clusters") +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = 16), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Minimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Maximal cost"),size=1)+
geom_point(data=dat.at, aes(x=X1, y=X2,col="Optimal set"),shape=3,size=5) +
annotate(geom="text", x=52, y=14, label="Desired Power", color="#2166AC",size = 5,hjust = "left") +
annotate(geom="text", x=67, y=7, label="Optimal Cost", color="#B2182B",size = 5,hjust = "right") +
annotate(geom="text", x=58, y=10, label="Optimal Set", color="black",size = 5, hjust = "right") +
theme(legend.position="none",plot.title = element_text(hjust = 0.5)) + ggtitle("Desired Power Task")
p8 = ggplot() + theme_bw()  + xlim(40, 80) + ylim(5,16) +
scale_colour_manual(values = c("#B2182B", "#2166AC","black"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid","blank"),shape = c(NA, NA,3)))) +
xlab("Participants per Cluster") +
ylab("Number of Clusters") +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Minimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Maximal cost"),size=1)+
geom_point(data=dat.at, aes(x=X1, y=X2,col="Optimal set"),shape=3,size=5) +
annotate(geom="text", x=52, y=14, label="Optimal Power", color="#2166AC",size = 5,hjust = "left") +
annotate(geom="text", x=67, y=7, label="Cost Threshold", color="#B2182B",size = 5,hjust = "right") +
annotate(geom="text", x=58, y=10, label="Optimal Set", color="black",size = 5, hjust = "right") +
theme(legend.position="none",plot.title = element_text(hjust = 0.5)) + ggtitle("Cost Threshold Task")
g1 = grid.arrange(p7,p8, ncol=2)
pdf(paste0(folder,"multi_true_2D.pdf"),height=.8*4,width=.8*7);grid.draw(g1);dev.off()
# comparison simr (discussion) ----------------------------------------------------------
# relevant runs
ind = sapply(res,function(x)
x[[1]]$fun_nr==5 & x[[1]]$budget=="mid"
)
rel = res[ind]
# sampled @n=16
n = sapply(rel,function(x) {
a=x[[4]]
ind = sapply(a$data,function(y) y$x==16)
length(a$data[ind][[1]]$y)
})
mean(n)
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# import analytical results for DGFs 3 and 4 ("analytical")
# Calculate corresponding actual power for these values ("analytical_power")
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = an[[3]]$analytical
resX$analytical[as.numeric(resX$fun_nr)==4] = an[[4]]$analytical
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = at[[3]]$true_power.fun(an[[3]]$analytical)
resX$analytical_power[as.numeric(resX$fun_nr)==4] = at[[4]]$true_power.fun(an[[4]]$analytical)
resX = resX[resX$learner!="Analytical",]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=.8*6,width=.8*9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.5) # how many?
resy = resy[resy$true_power>=.5,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=.8*6,width=.8*9.2);p11;dev.off()
# Cost Plot
resy = resX[as.numeric(resX$fun_nr)%in%c(2,6),]
p2 = ggplot(resy, aes(x= learner,y=cost,fill=budget)) + theme_bw() +
geom_hline(data= resy, aes(yintercept=actual_cost, linetype="Optimal cost"), color = "#B2182B") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Reds")+
facet_wrap(~ fun_nr,  scales = "free") + scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#B2182B")))) + ylab("Cost")+ xlab("Surrogate Model")+
labs(fill='Budget')+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot2_",usetask,".pdf"),height=.8*4 ,width=.8*7);p2;dev.off()
# 2D Plot Function 2
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p3 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#2166AC","#B2182B"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = max(resX1$X2)), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Desired power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Optimal cost"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per group") +
ylab("Number of groups")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot3_",usetask,".pdf"),height=.8*4,width=.8*9.2);p3;dev.off()
# 2D Plot Function 6
fn_nr = 6
resX1 = resX[resX$fun_nr=="6 2D Mixed Model",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p4 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#2166AC","#B2182B"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = max(resX1$X2)), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Desired power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Optimal cost"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per cluster") + ylab("Number of clusters")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot4_",usetask,".pdf"),height=.8*6,width=.8*9.2);p4;dev.off()
# Boxplot time
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")+theme(legend.position="right") + labs(x="Surrogate Model",y="Time used",fill="Budget")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=.8*4, width=.8*7);p_time;dev.off()
# Task C -----------------------------------------------------------------
usetask = "C"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=.8*6,width=.8*9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.7) # how many?
resy = resy[resy$true_power>=.7,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=.8*6,width=.8*9.2);p11;dev.off()
# 2D Plot Function 2
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p3 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#B2182B","#2166AC"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Optimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Cost Threshold"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per group") +
ylab("Number of groups")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot3_",usetask,".pdf"),height=.8*4,width=.8*9.2);p3;dev.off()
# 2D Plot Function 6
fn_nr = 6
resX1 = resX[resX$fun_nr=="6 2D Mixed Model",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p4 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#B2182B","#2166AC"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Optimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Cost Threshold"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per cluster") + ylab("Number of clusters")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))+theme(legend.position="right")
pdf(paste0(folder,restag,"_plot4_",usetask,".pdf"),height=.8*6,width=.8*9.2);p4;dev.off()
# Plot Time
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")+theme(legend.position="right")+ labs(x="Surrogate Model",y="Time used",fill="Budget")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=.8*4, width=.8*7);p_time;dev.off()
# 2Dplot for introduction----------------------------------
# http://www.sthda.com/english/wiki/colors-in-r
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# import analytical results for DGFs 3 and 4 ("analytical")
# Calculate corresponding actual power for these values ("analytical_power")
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = an[[3]]$analytical
resX$analytical[as.numeric(resX$fun_nr)==4] = an[[4]]$analytical
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = at[[3]]$true_power.fun(an[[3]]$analytical)
resX$analytical_power[as.numeric(resX$fun_nr)==4] = at[[4]]$true_power.fun(an[[4]]$analytical)
resX = resX[resX$learner!="Analytical",]
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
dat.at = data.frame(t(atx$actually_true))
eqpower = eqpower[!is.na(eqpower$X2),]
p7 = ggplot() + theme_bw()  + xlim(40, 80) + ylim(5,16) +
scale_colour_manual(values = c("#B2182B", "#2166AC","black"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid","blank"),shape = c(NA, NA,3)))) +
xlab("Participants per Cluster") +
ylab("Number of Clusters") +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = 16), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Minimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Maximal cost"),size=1)+
geom_point(data=dat.at, aes(x=X1, y=X2,col="Optimal set"),shape=3,size=5) +
annotate(geom="text", x=52, y=14, label="Desired Power", color="#2166AC",size = 5,hjust = "left") +
annotate(geom="text", x=67, y=7, label="Optimal Cost", color="#B2182B",size = 5,hjust = "right") +
annotate(geom="text", x=58, y=10, label="Optimal Set", color="black",size = 5, hjust = "right") +
theme(legend.position="none",plot.title = element_text(hjust = 0.5)) + ggtitle("Desired Power Task")
p8 = ggplot() + theme_bw()  + xlim(40, 80) + ylim(5,16) +
scale_colour_manual(values = c("#B2182B", "#2166AC","black"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid","blank"),shape = c(NA, NA,3)))) +
xlab("Participants per Cluster") +
ylab("Number of Clusters") +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Minimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Maximal cost"),size=1)+
geom_point(data=dat.at, aes(x=X1, y=X2,col="Optimal set"),shape=3,size=5) +
annotate(geom="text", x=52, y=14, label="Optimal Power", color="#2166AC",size = 5,hjust = "left") +
annotate(geom="text", x=67, y=7, label="Cost Threshold", color="#B2182B",size = 5,hjust = "right") +
annotate(geom="text", x=58, y=10, label="Optimal Set", color="black",size = 5, hjust = "right") +
theme(legend.position="none",plot.title = element_text(hjust = 0.5)) + ggtitle("Cost Threshold Task")
g1 = grid.arrange(p7,p8, ncol=2)
pdf(paste0(folder,"multi_true_2D.pdf"),height=.8*4,width=.8*7);grid.draw(g1);dev.off()
# comparison simr (discussion) ----------------------------------------------------------
# relevant runs
ind = sapply(res,function(x)
x[[1]]$fun_nr==5 & x[[1]]$budget=="mid"
)
rel = res[ind]
# sampled @n=16
n = sapply(rel,function(x) {
a=x[[4]]
ind = sapply(a$data,function(y) y$x==16)
length(a$data[ind][[1]]$y)
})
mean(n)
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# import analytical results for DGFs 3 and 4 ("analytical")
# Calculate corresponding actual power for these values ("analytical_power")
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = an[[3]]$analytical
resX$analytical[as.numeric(resX$fun_nr)==4] = an[[4]]$analytical
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = at[[3]]$true_power.fun(an[[3]]$analytical)
resX$analytical_power[as.numeric(resX$fun_nr)==4] = at[[4]]$true_power.fun(an[[4]]$analytical)
resX = resX[resX$learner!="Analytical",]
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
correct = sapply(1:nrow(eqcost),function(i) {
costfun(eqcost[i,])==actual_cost
})
eqcost = eqcost[correct,]
dat.at = data.frame(t(atx$actually_true))
eqpower = eqpower[!is.na(eqpower$X2),]
p7 = ggplot() + theme_bw()  + xlim(40, 80) + ylim(5,16) +
scale_colour_manual(values = c("#B2182B", "#2166AC","black"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid","blank"),shape = c(NA, NA,3)))) +
xlab("Participants per Cluster") +
ylab("Number of Clusters") +
geom_ribbon(data=eqpower,aes(x=X1,ymin = X2, ymax = 16), fill = "#92C5DE") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Minimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Maximal cost"),size=1)+
geom_point(data=dat.at, aes(x=X1, y=X2,col="Optimal set"),shape=3,size=5) +
annotate(geom="text", x=52, y=14, label="Desired Power", color="#2166AC",size = 5,hjust = "left") +
annotate(geom="text", x=67, y=7, label="Optimal Cost", color="#B2182B",size = 5,hjust = "right") +
annotate(geom="text", x=58, y=10, label="Optimal Set", color="black",size = 5, hjust = "right") +
theme(legend.position="none",plot.title = element_text(hjust = 0.5)) + ggtitle("Desired Power Task")
p8 = ggplot() + theme_bw()  + xlim(40, 80) + ylim(5,16) +
scale_colour_manual(values = c("#B2182B", "#2166AC","black"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid","blank"),shape = c(NA, NA,3)))) +
xlab("Participants per Cluster") +
ylab("Number of Clusters") +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Minimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Maximal cost"),size=1)+
geom_point(data=dat.at, aes(x=X1, y=X2,col="Optimal set"),shape=3,size=5) +
annotate(geom="text", x=52, y=14, label="Optimal Power", color="#2166AC",size = 5,hjust = "left") +
annotate(geom="text", x=67, y=7, label="Cost Threshold", color="#B2182B",size = 5,hjust = "right") +
annotate(geom="text", x=58, y=10, label="Optimal Set", color="black",size = 5, hjust = "right") +
theme(legend.position="none",plot.title = element_text(hjust = 0.5)) + ggtitle("Cost Threshold Task")
g1 = grid.arrange(p7,p8, ncol=2)
pdf(paste0(folder,"multi_true_2D.pdf"),height=4,width=7);grid.draw(g1);dev.off()
# comparison simr (discussion) ----------------------------------------------------------
sessionInfo()
devtools::load_all(".")
sessionInfo()
devtools::load_all(".")
load.libs()
load.libs(all=T)
a = sessionInfo()
View(a)
sessionInfo()
devtools::load_all(".")
load.libs(all=T)
a = sessionInfo()
pckgs = list(a$otherPkgs,a$loadedOnly
pckgs = list(a$otherPkgs,a$loadedOnly)
pckgs = list(a$otherPkgs,a$loadedOnly)
pckgs
packages2= c( "simr" , "simpackage"  ,"lme4",  "Matrix" ,  "mirt" , "lattice", "randtoolbox" ,"rngWELL" , "WeightSVM", "sn", "stats4" , "e1071","DiceKriging" , "digest" , "rlist", "faux", "parallel", "grid" , "MASS" , "gridExtra", "ggplot2","stats", "graphics","grDevices",  "utils" , "datasets","methods", "base","plotly","pso","optimr","spatstat","pwr","RColorBrewer","dplyr","remotes")
i = "simr"
names(pckgs)
View(pckgs)
pckgs = c(a$otherPkgs,a$loadedOnly)
View(pckgs)
pckgs$simr
devtools::load_all(".")
load.libs(all=T)
a = sessionInfo()
pckgs = c(a$otherPkgs,a$loadedOnly)
packages2= c( "simr" , "simpackage"  ,"lme4",  "Matrix" ,  "mirt" , "lattice", "randtoolbox" ,"rngWELL" , "WeightSVM", "sn", "stats4" , "e1071","DiceKriging" , "digest" , "rlist", "faux", "parallel", "grid" , "MASS" , "gridExtra", "ggplot2","stats", "graphics","grDevices",  "utils" , "datasets","methods", "base","plotly","pso","optimr","spatstat","pwr","RColorBrewer","dplyr","remotes")
for (i in packages2) {
# i = "simr"
print(c(pckgs$i$Package,pckgs$i$Version))
}
packages2
i = "simr"
print(c(pckgs$i$Package,pckgs$i$Version))
pckgs$i
a = sessionInfo()
pckgs = c(a$otherPkgs,a$loadedOnly)
pckgs
View(a)
a = sessionInfo()
a$otherPkgs
a$loadedOnly
View(a$otherPkgs)
View(a$loadedOnly)
pckgs = c(a$otherPkgs,a$loadedOnly)
View(pcks)
View(pckgs)
for (i in packages2) {
# i = "simr"
print(c(pckgs$i$Package,pckgs$i$Version))
}
print(c(pckgs[[i]]$Package,pckgs$i$Version))
print(c(pckgs[[i]]$Package,pckgs[[i]]$Version))
packages2= c( "simr" , "simpackage"  ,"lme4",  "Matrix" ,  "mirt" , "lattice", "randtoolbox" ,"rngWELL" , "WeightSVM", "sn", "stats4" , "e1071","DiceKriging" , "digest" , "rlist", "faux", "parallel", "grid" , "MASS" , "gridExtra", "ggplot2","stats", "graphics","grDevices",  "utils" , "datasets","methods", "base","plotly","pso","optimr","spatstat","pwr","RColorBrewer","dplyr","remotes")
for (i in packages2) {
# i = "simr"
print(c(pckgs[[i]]$Package,pckgs[[i]]$Version))
}
View(a)
install.packages("mirt")
install.packages("purrr")
