scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
resy = resy[resy$true_power>=.7,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=5,width=9.2);p11;dev.off()
# Höhenlinien Plot Function 2
fn_nr = 2
resX1 = resX[resX$fun_nr=="2 ANOVA",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p3 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#B2182B","#2166AC"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Optimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Cost Threshold"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per group") +
ylab("Number of groups")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))
pdf(paste0(folder,restag,"_plot3_",usetask,".pdf"),height=5,width=9.2);p3;dev.off()
# Höhenlinien Plot Function 6
fn_nr = 6
resX1 = resX[resX$fun_nr=="6 2D Mixed Model",]
atx = at[[fn_nr]]
true_power.fun = atx$true_power.fun
actual_power = atx$actual_power
actual_cost = atx$actual_cost
dat.at = data.frame(t(atx$actually_true))
x1 = load.cond(fn_nr,usetask,budget=NA,goal.ci=NA)
costfun=x1$cost
design=x1$design
xvals = seq(min(resX1$X1,na.rm=T),max(resX1$X1,na.rm=T),.5)
eqpower.y = sapply(xvals,function(x) {
fn = function(y) abs(true_power.fun(c(x,y))-actual_power)
a = optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])
legit = a$value<.001
if(legit) return(a$par) else return(NA)
})
eqpower = data.frame(X1=xvals,X2=eqpower.y)
eqcost.y = sapply(xvals,function(x) {
fn = function(y) abs(costfun(c(x,y))-actual_cost)
optim(20,fn,method="L-BFGS-B",lower=design[[2]][[1]],upper=design[[2]][[2]])$par})
eqcost = data.frame(X1=xvals,X2=eqcost.y)
eqpower = eqpower[eqpower$X2<=max(resX1$X2),]
eqcost = eqcost[eqcost$X2<=max(resX1$X2),]
resX1$budget = recode(resX1$budget, "low" = 'Budget = 1000', "mid" = 'Budget = 3000', "high" =  'Budget = 9000' )
p4 = ggplot(resX1, aes(x=X1, y=X2)) + theme_bw() +
scale_colour_manual(values = c("#B2182B","#2166AC"), guide = guide_legend(title="",override.aes = list(linetype = c("solid", "solid"),shape = c(NA, NA)))) +
geom_ribbon(data=eqcost,aes(x=X1,ymin = 5, ymax = X2), fill = "#F4A582") +
geom_line(data=eqpower,aes(x=X1, y=X2,col="Optimal power"),size=1)+
geom_line(data=eqcost,aes(x=X1, y=X2,col="Cost Threshold"),size=1)+
geom_point(aes(shape = learner),size=2) +
geom_point(data=dat.at, aes(x=X1, y=X2,shape="Optimal set"),size=3,color="purple") +
xlab("Participants per cluster") + ylab("Number of clusters")+
facet_wrap(~ budget,scales = "fixed") +
scale_shape_manual(values = c(1,16,4), guide = guide_legend(title="",override.aes = list(shape = c(1,16,4),color=c("black","purple","black"),size=c(4,4,4))))
pdf(paste0(folder,restag,"_plot4_",usetask,".pdf"),height=5,width=9.2);p4;dev.off()
# Plot Time
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) +  geom_boxplot() + facet_wrap(~ fun_nr, scales = "free_x")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
sum(resy$true_power<.7) # how many?
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# insert analytical results (wo kommen die her? am anfang importieren?)
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = 99.0805650087345
resX$analytical[as.numeric(resX$fun_nr)==4] = 150
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = 0.786687772969949
resX$analytical_power[as.numeric(resX$fun_nr)==4] = 0.787123625772207
resX = resX[resX$learner!="Analytical",]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
resy = resy[resy$true_power>=.7,]
sum(resy$true_power<.7) # how many?
devtools::load_all(".")
load.libs()
load(file = paste0(folder,"tempres.Rdata")) #resx
load(file = paste0(folder,"at.Rdata")) # at
# Task B ------------------------------------------------------------
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# insert analytical results (wo kommen die her? am anfang importieren?)
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = 99.0805650087345
resX$analytical[as.numeric(resX$fun_nr)==4] = 150
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = 0.786687772969949
resX$analytical_power[as.numeric(resX$fun_nr)==4] = 0.787123625772207
resX = resX[resX$learner!="Analytical",]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.7) # how many?
resy = resy[resy$true_power>=.7,]
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.5) # how many?
resy = resy[resy$true_power>=.5,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=5,width=9.2);p11;dev.off()
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# insert analytical results (wo kommen die her? am anfang importieren?)
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = 99.0805650087345
resX$analytical[as.numeric(resX$fun_nr)==4] = 150
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = 0.786687772969949
resX$analytical_power[as.numeric(resX$fun_nr)==4] = 0.787123625772207
resX = resX[resX$learner!="Analytical",]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.7) # how many?
resy = resy[resy$true_power>=.7,]
p11 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_hline(data= resX, aes(yintercept=analytical_power, linetype="Analytical power"), color = "black") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1, 1),guide = guide_legend(override.aes = list(color = c("black","#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot11_",usetask,".pdf"),height=5,width=9.2);p11;dev.off()
usetask = "C"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.5) # how many?
sum(resy$true_power<.7) # how many?
# Power Plot / removed outliers
sum(resy$true_power<.75) # how many?
usetask = "C"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
pdf(paste0(folder,restag,"_plot1_",usetask,".pdf"),height=5,width=9.2);p1;dev.off()
# Power Plot / removed outliers
sum(resy$true_power<.75) # how many?
# Power Plot / removed outliers
sum(resy$true_power<.7) # how many?
resy = resy[resy$true_power>=.7,]
# relevant runs
ind = sapply(res,function(x)
x[[1]]$fun_nr==5 & x[[1]]$budget=="mid"
)
rel = res[ind]
# sampled @n=16
n = sapply(rel,function(x) {
a=x[[4]]
ind = sapply(a$data,function(y) y$x==16)
length(a$data[ind][[1]]$y)
})
mean(n)
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# insert analytical results (wo kommen die her? am anfang importieren?)
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = 99.0805650087345
resX$analytical[as.numeric(resX$fun_nr)==4] = 150
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = 0.786687772969949
resX$analytical_power[as.numeric(resX$fun_nr)==4] = 0.787123625772207
resX = resX[resX$learner!="Analytical",]
resy = resX[!is.na(resX$true_power),]
which(resy$true_power>=.5)
resy$true_power<=.5
which(resy$true_power<=.5)#
which(resy$true_power<=.5)#
resy[825,]
resy[1002,]+
)
resy[1002,]
resy[1773,]+
resy[1773,]+
9
resy[1773,]
restag = c("52","53","54","55")
folder = "C:/Users/felix/switchdrive/4 irt/paper 2/"
# folder = "C:/Users/admin/switchdrive/4 irt/paper 2/"
rest = list()
for (i in restag) {
load(file= paste0(folder,"res_",i,".Rdata"))
rest = c(rest,res)
}
res = rest
load(file= paste0(folder,"at.Rdata"))
seed = 76623998
seeds.used = sapply(res,function(x)x[[1]]$seed)
ind = which(seeds.used ==seed)
as.numeric(ind)
x = res[[ind]]
View(res)
View(x)
todataframe(x[[5]]$data)
usetask = "C"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# Power Plot
resy = resX[!is.na(resX$true_power),]
p1 = ggplot(resy, aes(x= learner,y=true_power,fill=budget)) +  theme_bw() +
geom_hline(data= resX, aes(yintercept=actual_power, linetype="Optimal power"), color = "#2166AC") +
geom_violin(draw_quantiles = 0.5) +
scale_fill_brewer(palette="Blues")+
facet_wrap(~ fun_nr,scales = "free_x") +
scale_linetype_manual(name = "", values = c(1),guide = guide_legend(override.aes = list(color = c("#2166AC")))) +
ylab("Power")+ xlab("Surrogate Model") +
labs(fill='Budget')
usetask = "C"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
View(resX)
resz = resX[17 %in% resX$X1,]
View(resz)
resz = resX[resX$X1==17,]
seed = 49059585 # Outlier in Plot 4C
seeds.used = sapply(res,function(x)x[[1]]$seed)
ind = which(seeds.used ==seed)
as.numeric(ind)
x = res[[ind]]
View(res)
View(x)
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) +  theme_bw() +
# Boxplot Zeit
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) +  theme_bw() +
geom_boxplot() + facet_wrap(~ fun_nr, scales = "free_x")
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) +
theme_bw() +  geom_boxplot() + facet_wrap(~ fun_nr, scales = "free_x")
p_time
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) +
theme_bw() +  geom_boxplot() + facet_wrap(~ fun_nr, scales = "free_x")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
# Boxplot Zeit
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) + facet_wrap(~ fun_nr, scales = "free_x")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
devtools::load_all(".")
load.libs()
load(file = paste0(folder,"tempres.Rdata")) #resx
load(file = paste0(folder,"at.Rdata")) # at
usetask = "B"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# insert analytical results (wo kommen die her? am anfang importieren?)
resX$analytical = NA
resX$analytical[as.numeric(resX$fun_nr)==3] = 99.0805650087345
resX$analytical[as.numeric(resX$fun_nr)==4] = 150
resX$analytical_power = NA
resX$analytical_power[as.numeric(resX$fun_nr)==3] = 0.786687772969949
resX$analytical_power[as.numeric(resX$fun_nr)==4] = 0.787123625772207
resX = resX[resX$learner!="Analytical",]
# Boxplot Zeit
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
usetask = "C"
resX = resx[resx$task==usetask,]
r
usetask = "C"
resX = resx[resx$task==usetask,]
resX = resX[!is.na(resX$cost),]
# Plot Time
p_time = ggplot(resX, aes(x= learner,y=time_used,fill=budget)) + theme_bw() +
geom_violin(draw_quantiles = 0.5) +scale_fill_brewer(palette="Greys")+ facet_wrap(~ fun_nr, scales = "free_x")
pdf(paste0(folder,restag,"_plot_time_",usetask,".pdf"),height=4, width=7);p_time;dev.off()
?lm
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
group <- gl(2, 10, 20, labels = c("Ctl","Trt"))
weight <- c(ctl, trt)
lm.D9 <- lm(weight ~ group)
weight
group
plot(lm.D9)
plot(lm.D9)
plot(group,weight)
scatterplot(group,weight)
scatter
?plot
plot(group,weight)
plot(as.numeric(group),weight)
summary(lm)
summary(lm.D9)
A = as.numeric(group)
A
b = as.numeric(weight)
-Ab
-A*b
-A%*%b
-A%*%b / A%*%A
A%*%A
A
A
b
-t(A)%*%b
-t(A)%*%b / A%*%A
lm.D9 <- lm(weight ~ group+0)
summary(lm.D9)
lm.D9 <- lm(weight ~ group-1)
summary(lm.D9)
ctl <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
trt <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
lm.D9 <- lm(weight ~ trt-1)
lm.D9 <- lm(y ~ x-1)
y <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
x <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
lm.D9 <- lm(y ~ x-1)
summary(lm.D9)
y <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
x <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
lm.D9 <- lm(y ~ x-1)
A = x
b = y
-t(A)%*%b / A%*%A
y <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
x <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
lm.D9 <- lm(y ~ x-1)
A = x
b = y
-t(A)%*%b / A%*%A
lm.D9 <- lm(y ~ x +0)
A = x
b = y
-t(A)%*%b / A%*%A
summary(lm.D9)
t(A)%*%b / A%*%A
y <- c(4.17,5.58,5.18,6.11,4.50,4.61,5.17,4.53,5.33,5.14)
x <- c(4.81,4.17,4.41,3.59,5.87,3.83,6.03,4.89,4.32,4.69)
lm.D9 <- lm(y ~ x +0)
A = x
b = y
t(A)%*%b / A%*%A
# load packages
if (!require(remotes)) install.packages("remotes")
library(remotes)
install_github("flxzimmer/dlpsych",quiet = T)
library(dlpsych)
library(keras)
library(tensorflow)
set_random_seed(1)
# Daten
dat = data_income(n=200)
# Schätzen per lm  ----------------------------------------
mod_lm = lm(income ~ education + unrelated1,dat)
summary(mod_lm)
coef(mod_lm)
# calculate loss
pred = predict(mod_lm,dat)
loss_lm = MSE(dat$income,pred)
loss_lm
# Schätzen per nn ---------------------------------------------------------
mod_nn = keras_model_sequential() %>%
layer_dense(units = 1,input_shape=2)
summary(mod_nn)
dat_y = dat$income
dat_x = dat[,c("education","unrelated1")] %>% as.matrix()
mod_nn = train_nn(mod_nn, y = dat_y,x = dat_x, loss = "MSE")
weights_nn(mod_nn)
# calculate loss
pred = predict(mod_nn,dat_x)
loss_nn = MSE(dat$income,pred)
loss_nn
# was können wir machen: loss vergleichen, weights vergleichen, weiter trainieren.
# Übung  ------------------------------------------------------------------
# Optional zum löschen aller bisher erstellten objekte:
# rm(list = ls())
# Trainings und Testdaten
set_random_seed(1)
dat_train = data_income_challenge("train")
dat_test = data_income_challenge("test")
# Trainiere ein lineares Modell mit Trainingsdaten
# Was sind die Parameter?
# Predicte die Testdaten mit dem trainierten Modell
# Was ist der Loss (MSE)?
mod_lm = lm(income ~ education + unrelated1,dat_train)
summary(mod_lm)
coef(mod_lm)
# calculate loss
pred = predict(mod_lm,dat_test)
loss_lm = MSE(dat_test$income,pred)
loss_lm
# Trainiere ein Neuronales Netz mit Trainingsdaten
# Was sind die Parameter?
# Predicte die Testdaten mit dem trainierten Modell
# Was ist der Loss (MSE)?
mod_nn = keras_model_sequential() %>%
layer_dense(units = 1,input_shape=2)
summary(mod_nn)
dat_y = dat_train$income
dat_x = dat_train[,c("education","unrelated1")] %>% as.matrix()
mod_nn = train_nn(mod_nn, y = dat_y,x = dat_x, loss = "MSE",learning_rate=.1,epochs=1000,silent=TRUE)
weights_nn(mod_nn)
# calculate loss
dat_x_test = dat_test[,c("education","unrelated1")] %>% as.matrix()
pred = predict(mod_nn,dat_x_test)
loss_nn = MSE(dat_test$income,pred)
loss_nn
# Versuche, das Training vom NN so anzupassen, dass Parameter und Loss vom NN ähnlich zum Loss vom lm wird.
# (über die Anzahl der Epochen, Learning Rate, siehe: ?train_nn )
